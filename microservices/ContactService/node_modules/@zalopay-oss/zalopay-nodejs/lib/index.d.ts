import { AxiosInstance } from 'axios';

interface Config {
    appId: string;
    paymentId?: string;
    key1: string;
    key2: string;
    privateKey?: string;
    callbackUrl?: string;
    env: "sandbox" | "production";
}

declare class ZaloPayClient {
    config: Config;
    httpClient: AxiosInstance;
    constructor(config: Config);
}

declare class AgreementBalanceRequest {
    /**
    * The unique ID of the application will be provided after the merchant registered successfully with ZaloPay.
    */
    "app_id"?: number;
    /**
    * The user\'s identifier on the merchant system,it can be a merchant user\'s id, phone, number, email...
    */
    "identifier": string;
    /**
    * The public token of the payer.
    */
    "pay_token": string;
    /**
    * Current timestamp in milliseconds.
    */
    "req_date": number;
    /**
    * Payment amount.
    */
    "amount": number;
    /**
    * It is signature of request. It\'s calculated by following input: hmacinput = app_id + `|` + pay_token + `|` + identifier + `|` + amount + `|` + req_date; and use sha256 with app\'s hmac key as sign key.
    */
    "mac"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class AgreementBalanceResponseDataInner {
    /**
    * Payment channel.
    */
    "channel"?: number;
    /**
    * If the user can pay on this channel.
    */
    "payable"?: boolean;
    /**
    * Bank code of the channel.
    */
    "bank_code"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class AgreementBalanceResponse {
    /**
    * Return codes: 1: Success, otherwise fail
    */
    "return_code"?: number;
    "return_message"?: string;
    /**
    *
    */
    "sub_return_code"?: number;
    "sub_return_message"?: string;
    "data"?: Array<AgreementBalanceResponseDataInner>;
    /**
    * \"The discount amount of the best user\'s voucher for merchant\'s order If discount_amount == 0 that means user has no voucher can apply for current order.\"
    */
    "discount_amount"?: number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class AgreementBindRequest {
    /**
    * The unique ID of the application will be provided after the merchant registered successfully with ZaloPay.
    */
    "app_id"?: number;
    /**
    * Unique transaction ID of application, format: yyMMddxxxxxxxxx. Max length is 40. For example: 180208181007242
    */
    "app_trans_id": string;
    /**
    * The timestamp that order was created at in ms. The different limit is 15 minutes.
    */
    "req_date": number;
    /**
    * Maximum permissible amount. The default is real balance.
    */
    "max_amount"?: number;
    /**
    * \"URL of merchant binding page(web), be used in the desktop binding scenario. After the binding process finished, ZaloPay auto-debit binding page will redirect to merchant binding page via redirect URL with the binding result.\"
    */
    "redirect_url"?: string;
    /**
    * \"The deep-link of merchant app, be used in the mobile binding  scenario. After the binding process finished, ZaloPay app  will open the merchant app via redirect deep link with the  binding result.\"
    */
    "redirect_deep_link"?: string;
    /**
    * JSON string contain binding information, describe which information user will agree to allow merchant to do, using confirmation binding.
    */
    "binding_data"?: string;
    /**
    * This field specify which type of binding, currently only WALLET is allowed. Default is WALLET if not provided
    */
    "binding_type"?: AgreementBindRequest.BindingTypeEnum;
    /**
    * TBD
    */
    "callback_url"?: string;
    /**
    * User\'s identifier on merchant system, it can be merchant user\'s id, phone number, email...
    */
    "identifier": string;
    /**
    * It is signature of request. It\'s calculated by following input: hmacinput = app_id + `|` + apps_trans_id + `|` + binding_data + `|` + binding_type + `|` + identifier + `|` + max_amount + `|` + req_date; and use sha256 with app\'s hmac key as sign key.
    */
    "mac"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
declare namespace AgreementBindRequest {
    declare enum BindingTypeEnum {
        Wallet = "WALLET"
    }
}

declare class AgreementBindResponse {
    /**
    * Return codes:  1 - SUCCESS  2 - FAIL  3 - PROCESSING  -500 - SYSTEM_ERROR  -429 - LIMIT_REQUEST_REACH  406 - ILLEGAL_STATUS  -405 - ILLEGAL_CLIENT_REQUEST  -403 - ILLEGAL_SIGNATURE_REQUEST  -402 - ILLEGAL_APP_REQUEST  -401 - ILLEGAL_DATA_REQUEST
    */
    "return_code"?: number;
    "return_message"?: string;
    /**
    *
    */
    "sub_return_code"?: number;
    "sub_return_message"?: string;
    "binding_id"?: string;
    "binding_url"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class AgreementPayRequest {
    /**
    * The unique ID of the application will be provided after the merchant registered successfully with ZaloPay.
    */
    "app_id"?: number;
    /**
    * user\'s identifier on the merchant system, it can be a merchant user\'s id, phone number, email...
    */
    "identifier": string;
    /**
    * The token is generated by API create_order.
    */
    "zp_trans_token": string;
    /**
    * The public token of the payer.
    */
    "pay_token": string;
    /**
    * Current timestamp in milliseconds.
    */
    "req_date": number;
    /**
    * It is signature of request. It\'s calculated by following input: hmacinput = app_id + `|` + identifier + `|` + zp_trans_token + `|` + pay_token + `|` + req_date; and use sha256 with app\'s hmac key as sign key.
    */
    "mac"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class AgreementPayResponse {
    /**
    * 1: Success, 2: Failed, 3: Processing
    */
    "return_code"?: number;
    /**
    * Description of return code
    */
    "return_message"?: string;
    /**
    * Detail error code
    */
    "sub_return_code"?: number;
    /**
    * Detail error message
    */
    "sub_return_message"?: string;
    /**
    * TXID of order transaction
    */
    "app_trans_id"?: string;
    /**
    * The ZaloPay\'s transaction code
    */
    "zp_trans_id"?: number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class AgreementQueryRequest {
    /**
    * The unique ID of the application will be provided after the merchant registered successfully with ZaloPay.
    */
    "app_id"?: number;
    /**
    * Unique transaction ID of application, format: yyMMddxxxxxxxxx. Max length is 40. For example: 180208181007242
    */
    "app_trans_id": string;
    /**
    * Current timestamp in milliseconds.
    */
    "req_date": number;
    /**
    * It is signature of request. It\'s calculated by following input: hmacinput = app_id + `|` + apps_trans_id + `|` + req_date; and use sha256 with app\'s hmac key as sign key.
    */
    "mac"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class AgreementQueryResponseData {
    /**
    * The app id of the merchant.
    */
    "app_id"?: number;
    /**
    * The merchant\'s unique id for the binding.
    */
    "app_trans_id"?: string;
    /**
    * The id of binding has been confirmed in the ZaloPay system.
    */
    "binding_id"?: string;
    /**
    * The public token is used when doing auto-debit.
    */
    "pay_token"?: string;
    /**
    * Server timestamp in seconds.
    */
    "server_time"?: number;
    /**
    * The identifier field in bind request.
    */
    "merchant_user_id"?: string;
    /**
    * 1: Confirmed, 3: Cancelled, 4: Disabled
    */
    "status"?: number;
    /**
    * Type of message:   1: The user confirms an agreement   2: The user updates the agreement
    */
    "msg_type"?: number;
    /**
    * The identifier of ZaloPay user per merchant app_id.
    */
    "zp_user_id"?: string;
    /**
    * Masked user phone (Ex: masked_user_phone: \"****6938\")
    */
    "masked_user_phone"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class AgreementQueryResponse {
    /**
    * Return codes:  1 - SUCCESS  2 - FAILED  3 - PENDING
    */
    "return_code"?: number;
    "return_message"?: string;
    /**
    *
    */
    "sub_return_code"?: number;
    "sub_return_message"?: string;
    "data"?: AgreementQueryResponseData;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class AgreementQueryUserRequest {
    /**
    * The unique ID of the application will be provided after the merchant registered successfully with ZaloPay.
    */
    "app_id"?: number;
    /**
    * The access token of the user after binding success.(This is pay_token value)
    */
    "access_token"?: string;
    /**
    * Current timestamp in milliseconds.
    */
    "req_date": number;
    /**
    * It is signature of request. It\'s calculated by following input: hmacinput = app_id + `|` + access_token + `|` + req_date; and use sha256 with app\'s hmac key as sign key.
    */
    "mac"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class AgreementQueryUserResponse {
    /**
    * Return codes: 1: Success, 2: Failed, 3: Processing
    */
    "return_code"?: number;
    "return_message"?: string;
    /**
    *
    */
    "sub_return_code"?: number;
    "sub_return_message"?: string;
    /**
    * \"Masked phone of user. For example: ****1234.\"
    */
    "phone"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class AgreementUnbindRequest {
    /**
    * The unique ID of the application will be provided after the merchant registered successfully with ZaloPay.
    */
    "app_id"?: number;
    /**
    * The user\'s identifier on the merchant system, it can be a merchant user\'s id, phone number, email...
    */
    "identifier": string;
    /**
    * The ID of binding that the user wants to unbind.
    */
    "binding_id": string;
    /**
    * The timestamp that order was created at in ms. The different limit is 15 minutes.
    */
    "req_date": number;
    /**
    * It is signature of request. It\'s calculated by following input: hmacinput = app_id + `|` + identifier + `|` + binding_id + `|` + req_date; and use sha256 with app\'s hmac key as sign key.
    */
    "mac"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class AgreementUnbindResponse {
    /**
    * Return codes: 1: Success, 2: Failed
    */
    "return_code"?: number;
    "return_message"?: string;
    /**
    *
    */
    "sub_return_code"?: number;
    "sub_return_message"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class DisbursementQueryMerchantBalanceRequest {
    /**
    * Client request identity, using for tracing request
    */
    "request_id"?: string;
    /**
    * The unique ID of the partner will be provided after the partner registered successfully with ZaloPay
    */
    "app_id"?: number;
    /**
    * The unique ID of the partner will be provided after the partner registered successfully with ZaloPay
    */
    "payment_id"?: string;
    /**
    * Requests timestamp in ms
    */
    "time": number;
    /**
    * It is a signature of the order. It’s calculated by following input: hmacInput = (app_id+ “|” + payment_id+ “|” + time) and use sha256 with app’s hmac key
    */
    "mac"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class DisbursementQueryMerchantBalanceResponseData {
    /**
    * Partner’s account balance
    */
    "balance"?: number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class DisbursementQueryMerchantBalanceResponse {
    /**
    * 1 - SUCCESS  2 - FAIL
    */
    "return_code"?: number;
    /**
    * Return code description
    */
    "return_message"?: string;
    /**
    * -401 - Request param illegal  -402 - Unauthorized  -500 - ZaloPay system error  -503 - The system is maintenance
    */
    "sub_return_code"?: number;
    /**
    * Sub return code description
    */
    "sub_return_message"?: string;
    "data"?: DisbursementQueryMerchantBalanceResponseData;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class DisbursementQueryOrderRequest {
    /**
    * The unique ID of the partner will be provided after the partner registered successfully with ZaloPay
    */
    "app_id"?: number;
    /**
    * The unique id in partner system
    */
    "partner_order_id": string;
    /**
    * Requests timestamp in ms
    */
    "time": number;
    /**
    * It is a signature of the order. It’s calculated by following input: hmacInput = (app_id+ “|” + partner_order_id+ “|” + time) and use sha256 with app’s hmac key
    */
    "mac"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class DisbursementQueryOrderResponseData {
    /**
    * Merchant transaction code
    */
    "order_id"?: string;
    /**
    * 1 – SUCCESS  2 – FAIL  3 – PROCESSING: Has to repeat query order status in a period of time until final status (configured interval and number of query)  4 – PENDING: Pending transactions, needs to be manually fixed by internal teams
    */
    "status"?: number;
    /**
    * User\'s identity
    */
    "m_u_id"?: string;
    /**
    * User’s phone
    */
    "phone"?: string;
    /**
    * Transaction amount
    */
    "amount"?: number;
    /**
    * Transaction description
    */
    "description"?: string;
    /**
    * Partner fee
    */
    "partner_fee"?: number;
    /**
    * ZaloPay fee
    */
    "zlp_fee"?: number;
    /**
    * Order extra info, json string
    */
    "extra_info"?: string;
    /**
    * Transaction timestamp in millisecond
    */
    "time"?: number;
    /**
    * ZaloPay\'s transaction code
    */
    "zp_trans_id"?: string;
    /**
    * ZaloPay middle_page url for notify merchant about success disbursement result
    */
    "result_url"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class DisbursementQueryOrderResponse {
    /**
    * 1 - SUCCESS  2 - FAIL
    */
    "return_code"?: number;
    /**
    * Return code description
    */
    "return_message"?: string;
    /**
    * -101 - Order not found  -401 - Request param illegal  -402 - Unauthorized  -500 - ZaloPay system error  -503 - The system is maintenance
    */
    "sub_return_code"?: number;
    /**
    * Sub return code description
    */
    "sub_return_message"?: string;
    "data"?: DisbursementQueryOrderResponseData;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class DisbursementQueryUserRequest {
    /**
    * Client request identity, using for tracing request
    */
    "request_id"?: string;
    /**
    * The unique ID of the partner will be provided after the partner registered successfully with ZaloPay
    */
    "app_id"?: number;
    /**
    * The user\'s phone
    */
    "phone": string;
    /**
    * Requests timestamp in ms
    */
    "time": number;
    /**
    * \"It is signature of order. It’s calculated by following input: hmacInput = (app_id + “|” + phone + “|” + time) and use sha256 with app’s hmac key\"
    */
    "mac"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class DisbursementQueryUserResponseData {
    /**
    * ZaloPay reference id
    */
    "reference_id"?: string;
    /**
    * User’s identity in ZaloPay system
    */
    "m_u_id"?: string;
    /**
    * User’s full name
    */
    "name"?: string;
    /**
    * User\'s phone
    */
    "phone"?: string;
    /**
    * \"ZaloPay middle_page url to onboard new users\"   \"Displayed when receiving return_code =2 && sub_return_code = -101\"
    */
    "onboarding_url"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class DisbursementQueryUserResponse {
    /**
    * 1 - SUCCESS  2 - FAIL
    */
    "return_code"?: number;
    /**
    * Return code description
    */
    "return_message"?: string;
    /**
    * -101 - User wallet account not exists  -401 - Request param illegal  -402 - Unauthorized  -500 - ZaloPay system error  -503 - The system is maintenance     -1011 - User wallet account has been locked
    */
    "sub_return_code"?: number;
    /**
    * Sub return code description
    */
    "sub_return_message"?: string;
    "data"?: DisbursementQueryUserResponseData;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class DisbursementTopupRequest {
    /**
    * The unique ID of the partner will be provided after the partner registered successfully with ZaloPay
    */
    "app_id"?: number;
    /**
    * The unique ID of the partner will be provided after the partner registered successfully with ZaloPay
    */
    "payment_id"?: string;
    /**
    * The unique id, generate in partner system. Using for reconcile
    */
    "partner_order_id": string;
    /**
    * The user\'s identity in the response of QueryUser API
    */
    "m_u_id": string;
    /**
    * The amount top-up to receiver’s wallet
    */
    "amount": number;
    /**
    * Extend information
    */
    "description": string;
    /**
    * Partner\'s specify info, a json string.   Example: “{\\“store_id\\”:\\“s2\\”,\\“store_name\\”:\\ “name\\”}
    */
    "partner_embed_data": string;
    /**
    * Zalopay reference id response in query user response
    */
    "reference_id"?: string;
    /**
    * Using for extend purpose, a json string
    */
    "extra_info": string;
    /**
    * Requests timestamp in ms
    */
    "time": number;
    /**
    * It’s calculated by following input: hmacinput = (app_id + “|” + payment_id + “|” + partner_order_id + “|” + m_u_id + “|” + amount + “|” + description + “|” + partner_embed_data + “|” + extra_info + “|” + time)  and use sha256 with app’s hmac key  then RSA with app’s private key ZaloPay provide
    */
    "sig"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class DisbursementTopupResponseData {
    /**
    * Merchant transaction code
    */
    "order_id"?: string;
    /**
    * 1 – SUCCESS  2 – FAIL  3 – PROCESSING: Has to repeat query order status in a period of time until final status (configured interval and number of query)  4 – PENDING: Pending transactions, needs to be manually fixed by internal teams
    */
    "status"?: number;
    /**
    * User\'s identity
    */
    "m_u_id"?: string;
    /**
    * User’s phone
    */
    "phone"?: string;
    /**
    * Transaction amount
    */
    "amount"?: number;
    /**
    * Transaction description
    */
    "description"?: string;
    /**
    * Partner fee
    */
    "partner_fee"?: number;
    /**
    * ZaloPay fee
    */
    "zlp_fee"?: number;
    /**
    * Order extra info, json string
    */
    "extra_info"?: string;
    /**
    * Transaction timestamp in millisecond
    */
    "time"?: number;
    /**
    * ZaloPay middle_page url to upgrade for users with fund-in limit  Displayed when receiving return_code =2 && sub_return_code = -406
    */
    "upgrade_url"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class DisbursementTopupResponse {
    /**
    * 1 - SUCCESS  2 - FAIL
    */
    "return_code"?: number;
    /**
    * Return code description
    */
    "return_message"?: string;
    /**
    * -68 - Duplicate resource  -101 - User wallet account not exists  -401 - Request param illegal  -402 - Unauthorized  -406 - User wallet reaches a fund-in limitation  -500 - ZaloPay system error  -503 - The system is maintenance
    */
    "sub_return_code"?: number;
    /**
    * Sub return code description
    */
    "sub_return_message"?: string;
    "data"?: DisbursementTopupResponseData;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class GatewayBankItem {
    /**
    * Bank code
    */
    "bankcode"?: string;
    /**
    * Bank name
    */
    "name"?: string;
    /**
    * Display order
    */
    "displayorder"?: number;
    "pcmid"?: number;
    /**
    * Minimum payment amount
    */
    "minamount"?: number;
    /**
    * Maximum payment amount
    */
    "maxamount"?: number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

/**
* List of supported banks  Data type:  Map(pmcid, Array(bankdto))  Note about pcmid:    36 - Visa/Master/JCB    37 - Bank account    38 - ZaloPay    39 - ATM      41 - VISA/Master Debit
*/
declare class GatewayGetListBanksResponseBanks {
    "_36"?: Array<GatewayBankItem>;
    "_37"?: Array<GatewayBankItem>;
    "_38"?: Array<GatewayBankItem>;
    "_39"?: Array<GatewayBankItem>;
    "_41"?: Array<GatewayBankItem>;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class GatewayGetListBanksResponse {
    /**
    * 1 - SUCCESS  2 - FAIL
    */
    "returncode"?: number;
    /**
    * Return code description
    */
    "returnmessage"?: string;
    "banks"?: GatewayGetListBanksResponseBanks;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class OrderCreateRequest {
    /**
    * The unique ID of the application will be provided after the merchant registered successfully with ZaloPay.
    */
    "app_id"?: number;
    /**
    * The merchant ID.
    */
    "app_user": string;
    /**
    * Unique transaction ID of application, format: yyMMddxxxxxxxxx. Max length is 40. For example: 180208181007242
    */
    "app_trans_id": string;
    /**
    * The timestamp that order was created at in ms. The different limit is 15 mitnutes.
    */
    "app_time": number;
    /**
    * Amount of money will be charged.
    */
    "amount": number;
    /**
    * Optional title of order.
    */
    "title"?: string;
    /**
    * Users will see this text when they are in the confirm payment screen.
    */
    "description": string;
    /**
    * ZaloPay will use this URL to notify when the payment success. If not provided, the default app callback URL will be used.
    */
    "callback_url"?: string;
    /**
    * This URL is used for transactions on the payment gateway when a transaction completed; the user will be redirected to this URL. It\'s the responsibility of merchants to provide the correct link.
    */
    "redirect_url"?: string;
    /**
    * JSON string describes the device specification.
    */
    "device_info"?: string;
    /**
    * JSON string describes order items.
    */
    "item": string;
    /**
    * JSON string include special information of order.
    */
    "embed_data": string;
    /**
    * It is signature of order. It\'s calculated by following input: hmac_input = app_id + `|` + app_trans_id + `|` + app_user + `|` + amount + `|` + app_time + `|` + embe_data + `|` + item and use SHA256 with app\'s hmac key as sign key.
    */
    "mac"?: string;
    /**
    * If the order is for Agreement, this field must be AGREEMENT.
    */
    "product_code"?: OrderCreateRequest.ProductCodeEnum;
    "bank_code"?: string;
    /**
    * User phone
    */
    "phone"?: string;
    /**
    * User email
    */
    "email"?: string;
    /**
    * User address
    */
    "address"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
declare namespace OrderCreateRequest {
    declare enum ProductCodeEnum {
        Agreement = "AGREEMENT"
    }
}

declare class OrderCreateResponse {
    /**
    * Return codes:  1 - SUCCESS  2 - FAIL
    */
    "return_code"?: number;
    "return_message"?: string;
    /**
    * The detailed reason explains why the operation has failed. Possible codes are:  -33 - APP_MAINTENANCE - The app is in maintenance  -68 - ALREADY_EXISTS - The order is already exists  -401 - INVALID_ARGUMENT - The request is invalid  -402 - UNAUTHENTICATED - The app is unauthenticated  -500 - SYSTEM_ERROR - The system is error
    */
    "sub_return_code"?: number;
    "sub_return_message"?: string;
    "zp_trans_token"?: string;
    "order_url"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class OrderQueryRequest {
    /**
    * The unique ID of the application will be provided after the merchant registered successfully with ZaloPay.
    */
    "app_id"?: number;
    /**
    * The transaction ID that is used for querying.
    */
    "app_trans_id": string;
    /**
    * It is signature of order. It\'s calculated by following input: hmacinput = appid + `|` + apptransid and use sha256 with app\'s hmac key as sign key
    */
    "mac"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class OrderQueryResponse {
    /**
    * Return codes:  1 - SUCCESS  2 - FAIL  3 - PROCESSING  -500 - SYSTEM_ERROR  -429 - LIMIT_REQUEST_REACH  406 - ILLEGAL_STATUS  -405 - ILLEGAL_CLIENT_REQUEST  -403 - ILLEGAL_SIGNATURE_REQUEST  -402 - ILLEGAL_APP_REQUEST  -401 - ILLEGAL_DATA_REQUEST
    */
    "return_code"?: number;
    "return_message"?: string;
    /**
    * Possible codes:  1 - Giao dịch thành công  -32 - Hệ thống đang có lỗi, vui lòng quay lại sau.  -33 - Ứng dụng đang bảo trì, vui lòng quay lại sau.  -34 - Kênh thanh toán đang bảo trì, vui lòng chọn kênh khác.  -35 - Kênh thanh toán không hỗ trợ hoặc đang bảo trì, vui lòng chọn kênh khác.  -43 - Ngân hàng đang bảo trì, vui lòng chọn ngân hàng khác.  -88 - Chức năng này đang bảo trì, vui lòng quay lại sau.  -101 - Hoàn tiền thành công. Chủ thẻ ATM, Thẻ VISA/Master/JCB sẽ được hoàn tiền trong 3-5 ngày làm việc.  -135 - Hệ thống đang bảo trì, vui lòng quay lại sau.  -301 - Hệ thống đang có lỗi. Vui lòng thử lại sau.  -322 - Payment Code hết hạn, giao dịch thất bại, tài khoản chưa bị trừ tiền. Vui lòng thực hiện lại.  -329 - User huỷ giao dịch thanh toán.
    */
    "sub_return_code"?: number;
    "sub_return_message"?: string;
    "is_processing"?: boolean;
    "amount"?: number;
    "zp_trans_id"?: number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class RefundCreateRequest {
    /**
    * The unique ID of the application will be provided after the merchant registered successfully with ZaloPay.
    */
    "app_id"?: number;
    /**
    * Refund ID will be generated by the application. Format: yymmdd_appid_xxxxxxxxxx.
    */
    "m_refund_id": string;
    /**
    * ZaloPay transaction ID for refunding.
    */
    "zp_trans_id": string;
    /**
    * Amount of money for refunding.
    */
    "amount": number;
    /**
    * The timestamp that refund order was created at in ms
    */
    "timestamp": number;
    /**
    * Reason for refunding.
    */
    "description": string;
    /**
    * It is signature of order. It\'s calculated by following input: hmacinput = appid + `|` + zptransid + `|` + amount + `|` + description + `|` + timestamp and use sha256 with app\'s hmac key as sign key
    */
    "mac"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class RefundCreateResponse {
    "return_code"?: number;
    "return_message"?: string;
    "sub_return_code"?: number;
    "sub_return_message"?: string;
    "refund_id"?: number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class RefundQueryRequest {
    /**
    * The unique ID of the application will be provided after the merchant registered successfully with ZaloPay.
    */
    "app_id"?: number;
    /**
    * Refund ID that is used for requesting refund.
    */
    "m_refund_id": string;
    /**
    * Timestamp of request in ms.
    */
    "timestamp": number;
    /**
    * It is signature of order. It\'s calculated by following input: hmacinput = appid + `|` + mrefundid + `|` + timestamp and use sha256 with app\'s hmac key as sign key
    */
    "mac"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class RefundQueryResponse {
    /**
    * Return codes:  1 - SUCCESS  2 - FAIL  3 - PROCESSING  -500 - SYSTEM_ERROR  -429 - LIMIT_REQUEST_REACH  406 - ILLEGAL_STATUS  -405 - ILLEGAL_CLIENT_REQUEST  -403 - ILLEGAL_SIGNATURE_REQUEST  -402 - ILLEGAL_APP_REQUEST  -401 - ILLEGAL_DATA_REQUEST
    */
    "return_code"?: number;
    "return_message"?: string;
    /**
    * Possible codes:  1 - Giao dịch thành công  -32 - Hệ thống đang có lỗi, vui lòng quay lại sau.  -33 - Ứng dụng đang bảo trì, vui lòng quay lại sau.  -34 - Kênh thanh toán đang bảo trì, vui lòng chọn kênh khác.  -35 - Kênh thanh toán không hỗ trợ hoặc đang bảo trì, vui lòng chọn kênh khác.  -43 - Ngân hàng đang bảo trì, vui lòng chọn ngân hàng khác.  -88 - Chức năng này đang bảo trì, vui lòng quay lại sau.  -101 - Hoàn tiền thành công. Chủ thẻ ATM, Thẻ VISA/Master/JCB sẽ được hoàn tiền trong 3-5 ngày làm việc.  -135 - Hệ thống đang bảo trì, vui lòng quay lại sau.  -301 - Hệ thống đang có lỗi. Vui lòng thử lại sau.  -322 - Payment Code hết hạn, giao dịch thất bại, tài khoản chưa bị trừ tiền. Vui lòng thực hiện lại.  -329 - User huỷ giao dịch thanh toán.
    */
    "sub_return_code"?: number;
    "sub_return_message"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

/**
* Requests timestamp in ms
*/
declare class ZodCreateInvoiceRequestOrderInfoInner {
    /**
    * Order\'s tracking number
    */
    "trackingNumber"?: string;
    /**
    * Order\'s description
    */
    "description"?: string;
    /**
    * Order\'s amount
    */
    "amount"?: number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

/**
* Receiver information
*/
declare class ZodCreateInvoiceRequestReceiver {
    /**
    * Receiver name
    */
    "contact"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class ZodCreateInvoiceRequest {
    /**
    * AppID provided by ZaloPay
    */
    "appId"?: string;
    /**
    * Merchant\'s reference ID of the order
    */
    "mcRefId": string;
    /**
    * The merchant\'s hub ID
    */
    "hubId"?: string;
    /**
    * The driver ID
    */
    "driverId"?: string;
    /**
    * Requests timestamp in ms
    */
    "amount": number;
    "receiver": ZodCreateInvoiceRequestReceiver;
    "orderInfo": Array<ZodCreateInvoiceRequestOrderInfoInner>;
    /**
    * JSOn string used for external info: merchandiseSubtotal, shippingSubtotal  Ex: \"{\\\"merchandiseSubtotal\\\":100000, \\\"shippingSubtotal\\\":10000}\"
    */
    "mcExtInfo": string;
    /**
    * It is signature of request. It’s calculated by following input: hmacInput = (appId + “|” + mcRefId + “|” + amount + “|” + mcExtInfo) and use sha256 with app’s hmac key
    */
    "mac"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class ZodCreateInvoiceResponse {
    /**
    * Url used to generate QR Code
    */
    "orderUrl"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class ZodQueryInvoiceResponse {
    /**
    * Url used to generate QR Code
    */
    "orderUrl"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class ZodQueryStatusResponse {
    /**
    * Order\'s status: 1: SUCCESS - 2: FAILURE - 3: UNPAID
    */
    "status"?: number;
    /**
    * Order\'s amount
    */
    "amount"?: string;
    /**
    * ZaloPay transaction\'s ID
    */
    "zpTransId"?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}

declare class ObjectSerializer {
    static findCorrectType(data: any, expectedType: string): any;
    static serialize(data: any, type: string): any;
    static deserialize(data: any, type: string): any;
}

declare class Service {
    config: Config;
    httpClient: AxiosInstance;
    protected constructor(client: ZaloPayClient);
}

declare class Tokenization extends Service {
    private readonly _bind;
    private readonly _unbind;
    private readonly _query;
    private readonly _balance;
    private readonly _pay;
    private readonly _query_user;
    private hmacUtils;
    constructor(client: ZaloPayClient);
    bind(bindRequest: AgreementBindRequest): Promise<AgreementBindResponse>;
    unbind(unbindRequest: AgreementUnbindRequest): Promise<AgreementUnbindResponse>;
    pay(payRequest: AgreementPayRequest): Promise<AgreementPayResponse>;
    query(queryRequest: AgreementQueryRequest): Promise<AgreementQueryResponse>;
    balance(balanceRequest: AgreementBalanceRequest): Promise<AgreementBalanceResponse>;
    queryUser(queryUserRequest: AgreementQueryUserRequest): Promise<AgreementQueryUserResponse>;
}

declare class Order extends Service {
    private readonly _create;
    private readonly _query;
    private hmacUtils;
    constructor(client: ZaloPayClient);
    create(createRequest: OrderCreateRequest): Promise<OrderCreateResponse>;
    query(queryRequest: OrderQueryRequest): Promise<OrderQueryResponse>;
}

declare class Refund extends Service {
    private readonly _create;
    private readonly _query;
    private hmacUtils;
    constructor(client: ZaloPayClient);
    create(createRequest: RefundCreateRequest): Promise<RefundCreateResponse>;
    query(queryRequest: RefundQueryRequest): Promise<RefundQueryResponse>;
}

declare class Disbursement extends Service {
    private readonly _query_merchant_balance;
    private readonly _query_user;
    private readonly _topup;
    private readonly _query_order;
    private readonly hmacUtils;
    private readonly rsaUtils;
    constructor(client: ZaloPayClient);
    queryMerchantBalance(balanceRequest: DisbursementQueryMerchantBalanceRequest): Promise<DisbursementQueryMerchantBalanceResponse>;
    queryUser(queryUserRequest: DisbursementQueryUserRequest): Promise<DisbursementQueryUserResponse>;
    topup(payRequest: DisbursementTopupRequest): Promise<DisbursementTopupResponse>;
    queryOrder(queryRequest: DisbursementQueryOrderRequest): Promise<DisbursementQueryOrderResponse>;
}

declare class Zod extends Service {
    private readonly _create;
    private readonly _query_invoice;
    private readonly _query_status;
    private hmacUtils;
    constructor(client: ZaloPayClient);
    createInvoice(createRequest: ZodCreateInvoiceRequest): Promise<ZodCreateInvoiceResponse>;
    queryInvoice(mcRefId: string, appId?: string): Promise<ZodQueryInvoiceResponse>;
    queryStatus(mcRefId: string, appId?: string): Promise<ZodQueryStatusResponse>;
}

declare class SecurityProvider {
    config: Config;
    constructor(client: ZaloPayClient);
    getVerifyMacString(data: string): string;
}

export { AgreementBalanceRequest, AgreementBalanceResponse, AgreementBalanceResponseDataInner, AgreementBindRequest, AgreementBindResponse, AgreementPayRequest, AgreementPayResponse, AgreementQueryRequest, AgreementQueryResponse, AgreementQueryResponseData, AgreementQueryUserRequest, AgreementQueryUserResponse, AgreementUnbindRequest, AgreementUnbindResponse, Config, Disbursement as DisbursementAPI, DisbursementQueryMerchantBalanceRequest, DisbursementQueryMerchantBalanceResponse, DisbursementQueryMerchantBalanceResponseData, DisbursementQueryOrderRequest, DisbursementQueryOrderResponse, DisbursementQueryOrderResponseData, DisbursementQueryUserRequest, DisbursementQueryUserResponse, DisbursementQueryUserResponseData, DisbursementTopupRequest, DisbursementTopupResponse, DisbursementTopupResponseData, GatewayBankItem, GatewayGetListBanksResponse, GatewayGetListBanksResponseBanks, ObjectSerializer, Order as OrderAPI, OrderCreateRequest, OrderCreateResponse, OrderQueryRequest, OrderQueryResponse, Refund as RefundAPI, RefundCreateRequest, RefundCreateResponse, RefundQueryRequest, RefundQueryResponse, SecurityProvider, Tokenization as TokenizationAPI, ZaloPayClient, Zod as ZodAPI, ZodCreateInvoiceRequest, ZodCreateInvoiceRequestOrderInfoInner, ZodCreateInvoiceRequestReceiver, ZodCreateInvoiceResponse, ZodQueryInvoiceResponse, ZodQueryStatusResponse };
