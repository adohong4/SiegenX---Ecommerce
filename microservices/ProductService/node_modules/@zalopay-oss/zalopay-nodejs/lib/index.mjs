var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/zalopay/zaloPayClient.ts
import axios from "axios";
var ZaloPayClient = class {
  constructor(config) {
    this.config = config;
    this.httpClient = axios.create({
      baseURL: config.env == "sandbox" ? "https://sb-openapi.zalopay.vn" : "https://openapi.zalopay.vn"
    });
  }
};

// src/zalopay/models/agreementBalanceRequest.ts
var _AgreementBalanceRequest = class {
  static getAttributeTypeMap() {
    return _AgreementBalanceRequest.attributeTypeMap;
  }
};
var AgreementBalanceRequest = _AgreementBalanceRequest;
AgreementBalanceRequest.discriminator = void 0;
AgreementBalanceRequest.attributeTypeMap = [
  {
    "name": "app_id",
    "baseName": "app_id",
    "type": "number"
  },
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string"
  },
  {
    "name": "pay_token",
    "baseName": "pay_token",
    "type": "string"
  },
  {
    "name": "req_date",
    "baseName": "req_date",
    "type": "number"
  },
  {
    "name": "amount",
    "baseName": "amount",
    "type": "number"
  },
  {
    "name": "mac",
    "baseName": "mac",
    "type": "string"
  }
];

// src/zalopay/models/agreementBalanceResponse.ts
var _AgreementBalanceResponse = class {
  static getAttributeTypeMap() {
    return _AgreementBalanceResponse.attributeTypeMap;
  }
};
var AgreementBalanceResponse = _AgreementBalanceResponse;
AgreementBalanceResponse.discriminator = void 0;
AgreementBalanceResponse.attributeTypeMap = [
  {
    "name": "return_code",
    "baseName": "return_code",
    "type": "number"
  },
  {
    "name": "return_message",
    "baseName": "return_message",
    "type": "string"
  },
  {
    "name": "sub_return_code",
    "baseName": "sub_return_code",
    "type": "number"
  },
  {
    "name": "sub_return_message",
    "baseName": "sub_return_message",
    "type": "string"
  },
  {
    "name": "data",
    "baseName": "data",
    "type": "Array<AgreementBalanceResponseDataInner>"
  },
  {
    "name": "discount_amount",
    "baseName": "discount_amount",
    "type": "number"
  }
];

// src/zalopay/models/agreementBalanceResponseDataInner.ts
var _AgreementBalanceResponseDataInner = class {
  static getAttributeTypeMap() {
    return _AgreementBalanceResponseDataInner.attributeTypeMap;
  }
};
var AgreementBalanceResponseDataInner = _AgreementBalanceResponseDataInner;
AgreementBalanceResponseDataInner.discriminator = void 0;
AgreementBalanceResponseDataInner.attributeTypeMap = [
  {
    "name": "channel",
    "baseName": "channel",
    "type": "number"
  },
  {
    "name": "payable",
    "baseName": "payable",
    "type": "boolean"
  },
  {
    "name": "bank_code",
    "baseName": "bank_code",
    "type": "string"
  }
];

// src/zalopay/models/agreementBindRequest.ts
var _AgreementBindRequest = class {
  static getAttributeTypeMap() {
    return _AgreementBindRequest.attributeTypeMap;
  }
};
var AgreementBindRequest = _AgreementBindRequest;
AgreementBindRequest.discriminator = void 0;
AgreementBindRequest.attributeTypeMap = [
  {
    "name": "app_id",
    "baseName": "app_id",
    "type": "number"
  },
  {
    "name": "app_trans_id",
    "baseName": "app_trans_id",
    "type": "string"
  },
  {
    "name": "req_date",
    "baseName": "req_date",
    "type": "number"
  },
  {
    "name": "max_amount",
    "baseName": "max_amount",
    "type": "number"
  },
  {
    "name": "redirect_url",
    "baseName": "redirect_url",
    "type": "string"
  },
  {
    "name": "redirect_deep_link",
    "baseName": "redirect_deep_link",
    "type": "string"
  },
  {
    "name": "binding_data",
    "baseName": "binding_data",
    "type": "string"
  },
  {
    "name": "binding_type",
    "baseName": "binding_type",
    "type": "AgreementBindRequest.BindingTypeEnum"
  },
  {
    "name": "callback_url",
    "baseName": "callback_url",
    "type": "string"
  },
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string"
  },
  {
    "name": "mac",
    "baseName": "mac",
    "type": "string"
  }
];
((AgreementBindRequest2) => {
  let BindingTypeEnum;
  ((BindingTypeEnum2) => {
    BindingTypeEnum2["Wallet"] = "WALLET";
  })(BindingTypeEnum = AgreementBindRequest2.BindingTypeEnum || (AgreementBindRequest2.BindingTypeEnum = {}));
})(AgreementBindRequest || (AgreementBindRequest = {}));

// src/zalopay/models/agreementBindResponse.ts
var _AgreementBindResponse = class {
  static getAttributeTypeMap() {
    return _AgreementBindResponse.attributeTypeMap;
  }
};
var AgreementBindResponse = _AgreementBindResponse;
AgreementBindResponse.discriminator = void 0;
AgreementBindResponse.attributeTypeMap = [
  {
    "name": "return_code",
    "baseName": "return_code",
    "type": "number"
  },
  {
    "name": "return_message",
    "baseName": "return_message",
    "type": "string"
  },
  {
    "name": "sub_return_code",
    "baseName": "sub_return_code",
    "type": "number"
  },
  {
    "name": "sub_return_message",
    "baseName": "sub_return_message",
    "type": "string"
  },
  {
    "name": "binding_id",
    "baseName": "binding_id",
    "type": "string"
  },
  {
    "name": "binding_url",
    "baseName": "binding_url",
    "type": "string"
  }
];

// src/zalopay/models/agreementPayRequest.ts
var _AgreementPayRequest = class {
  static getAttributeTypeMap() {
    return _AgreementPayRequest.attributeTypeMap;
  }
};
var AgreementPayRequest = _AgreementPayRequest;
AgreementPayRequest.discriminator = void 0;
AgreementPayRequest.attributeTypeMap = [
  {
    "name": "app_id",
    "baseName": "app_id",
    "type": "number"
  },
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string"
  },
  {
    "name": "zp_trans_token",
    "baseName": "zp_trans_token",
    "type": "string"
  },
  {
    "name": "pay_token",
    "baseName": "pay_token",
    "type": "string"
  },
  {
    "name": "req_date",
    "baseName": "req_date",
    "type": "number"
  },
  {
    "name": "mac",
    "baseName": "mac",
    "type": "string"
  }
];

// src/zalopay/models/agreementPayResponse.ts
var _AgreementPayResponse = class {
  static getAttributeTypeMap() {
    return _AgreementPayResponse.attributeTypeMap;
  }
};
var AgreementPayResponse = _AgreementPayResponse;
AgreementPayResponse.discriminator = void 0;
AgreementPayResponse.attributeTypeMap = [
  {
    "name": "return_code",
    "baseName": "return_code",
    "type": "number"
  },
  {
    "name": "return_message",
    "baseName": "return_message",
    "type": "string"
  },
  {
    "name": "sub_return_code",
    "baseName": "sub_return_code",
    "type": "number"
  },
  {
    "name": "sub_return_message",
    "baseName": "sub_return_message",
    "type": "string"
  },
  {
    "name": "app_trans_id",
    "baseName": "app_trans_id",
    "type": "string"
  },
  {
    "name": "zp_trans_id",
    "baseName": "zp_trans_id",
    "type": "number"
  }
];

// src/zalopay/models/agreementQueryRequest.ts
var _AgreementQueryRequest = class {
  static getAttributeTypeMap() {
    return _AgreementQueryRequest.attributeTypeMap;
  }
};
var AgreementQueryRequest = _AgreementQueryRequest;
AgreementQueryRequest.discriminator = void 0;
AgreementQueryRequest.attributeTypeMap = [
  {
    "name": "app_id",
    "baseName": "app_id",
    "type": "number"
  },
  {
    "name": "app_trans_id",
    "baseName": "app_trans_id",
    "type": "string"
  },
  {
    "name": "req_date",
    "baseName": "req_date",
    "type": "number"
  },
  {
    "name": "mac",
    "baseName": "mac",
    "type": "string"
  }
];

// src/zalopay/models/agreementQueryResponse.ts
var _AgreementQueryResponse = class {
  static getAttributeTypeMap() {
    return _AgreementQueryResponse.attributeTypeMap;
  }
};
var AgreementQueryResponse = _AgreementQueryResponse;
AgreementQueryResponse.discriminator = void 0;
AgreementQueryResponse.attributeTypeMap = [
  {
    "name": "return_code",
    "baseName": "return_code",
    "type": "number"
  },
  {
    "name": "return_message",
    "baseName": "return_message",
    "type": "string"
  },
  {
    "name": "sub_return_code",
    "baseName": "sub_return_code",
    "type": "number"
  },
  {
    "name": "sub_return_message",
    "baseName": "sub_return_message",
    "type": "string"
  },
  {
    "name": "data",
    "baseName": "data",
    "type": "AgreementQueryResponseData"
  }
];

// src/zalopay/models/agreementQueryResponseData.ts
var _AgreementQueryResponseData = class {
  static getAttributeTypeMap() {
    return _AgreementQueryResponseData.attributeTypeMap;
  }
};
var AgreementQueryResponseData = _AgreementQueryResponseData;
AgreementQueryResponseData.discriminator = void 0;
AgreementQueryResponseData.attributeTypeMap = [
  {
    "name": "app_id",
    "baseName": "app_id",
    "type": "number"
  },
  {
    "name": "app_trans_id",
    "baseName": "app_trans_id",
    "type": "string"
  },
  {
    "name": "binding_id",
    "baseName": "binding_id",
    "type": "string"
  },
  {
    "name": "pay_token",
    "baseName": "pay_token",
    "type": "string"
  },
  {
    "name": "server_time",
    "baseName": "server_time",
    "type": "number"
  },
  {
    "name": "merchant_user_id",
    "baseName": "merchant_user_id",
    "type": "string"
  },
  {
    "name": "status",
    "baseName": "status",
    "type": "number"
  },
  {
    "name": "msg_type",
    "baseName": "msg_type",
    "type": "number"
  },
  {
    "name": "zp_user_id",
    "baseName": "zp_user_id",
    "type": "string"
  },
  {
    "name": "masked_user_phone",
    "baseName": "masked_user_phone",
    "type": "string"
  }
];

// src/zalopay/models/agreementQueryUserRequest.ts
var _AgreementQueryUserRequest = class {
  static getAttributeTypeMap() {
    return _AgreementQueryUserRequest.attributeTypeMap;
  }
};
var AgreementQueryUserRequest = _AgreementQueryUserRequest;
AgreementQueryUserRequest.discriminator = void 0;
AgreementQueryUserRequest.attributeTypeMap = [
  {
    "name": "app_id",
    "baseName": "app_id",
    "type": "number"
  },
  {
    "name": "access_token",
    "baseName": "access_token",
    "type": "string"
  },
  {
    "name": "req_date",
    "baseName": "req_date",
    "type": "number"
  },
  {
    "name": "mac",
    "baseName": "mac",
    "type": "string"
  }
];

// src/zalopay/models/agreementQueryUserResponse.ts
var _AgreementQueryUserResponse = class {
  static getAttributeTypeMap() {
    return _AgreementQueryUserResponse.attributeTypeMap;
  }
};
var AgreementQueryUserResponse = _AgreementQueryUserResponse;
AgreementQueryUserResponse.discriminator = void 0;
AgreementQueryUserResponse.attributeTypeMap = [
  {
    "name": "return_code",
    "baseName": "return_code",
    "type": "number"
  },
  {
    "name": "return_message",
    "baseName": "return_message",
    "type": "string"
  },
  {
    "name": "sub_return_code",
    "baseName": "sub_return_code",
    "type": "number"
  },
  {
    "name": "sub_return_message",
    "baseName": "sub_return_message",
    "type": "string"
  },
  {
    "name": "phone",
    "baseName": "phone",
    "type": "string"
  }
];

// src/zalopay/models/agreementUnbindRequest.ts
var _AgreementUnbindRequest = class {
  static getAttributeTypeMap() {
    return _AgreementUnbindRequest.attributeTypeMap;
  }
};
var AgreementUnbindRequest = _AgreementUnbindRequest;
AgreementUnbindRequest.discriminator = void 0;
AgreementUnbindRequest.attributeTypeMap = [
  {
    "name": "app_id",
    "baseName": "app_id",
    "type": "number"
  },
  {
    "name": "identifier",
    "baseName": "identifier",
    "type": "string"
  },
  {
    "name": "binding_id",
    "baseName": "binding_id",
    "type": "string"
  },
  {
    "name": "req_date",
    "baseName": "req_date",
    "type": "number"
  },
  {
    "name": "mac",
    "baseName": "mac",
    "type": "string"
  }
];

// src/zalopay/models/agreementUnbindResponse.ts
var _AgreementUnbindResponse = class {
  static getAttributeTypeMap() {
    return _AgreementUnbindResponse.attributeTypeMap;
  }
};
var AgreementUnbindResponse = _AgreementUnbindResponse;
AgreementUnbindResponse.discriminator = void 0;
AgreementUnbindResponse.attributeTypeMap = [
  {
    "name": "return_code",
    "baseName": "return_code",
    "type": "number"
  },
  {
    "name": "return_message",
    "baseName": "return_message",
    "type": "string"
  },
  {
    "name": "sub_return_code",
    "baseName": "sub_return_code",
    "type": "number"
  },
  {
    "name": "sub_return_message",
    "baseName": "sub_return_message",
    "type": "string"
  }
];

// src/zalopay/models/disbursementQueryMerchantBalanceRequest.ts
var _DisbursementQueryMerchantBalanceRequest = class {
  static getAttributeTypeMap() {
    return _DisbursementQueryMerchantBalanceRequest.attributeTypeMap;
  }
};
var DisbursementQueryMerchantBalanceRequest = _DisbursementQueryMerchantBalanceRequest;
DisbursementQueryMerchantBalanceRequest.discriminator = void 0;
DisbursementQueryMerchantBalanceRequest.attributeTypeMap = [
  {
    "name": "request_id",
    "baseName": "request_id",
    "type": "string"
  },
  {
    "name": "app_id",
    "baseName": "app_id",
    "type": "number"
  },
  {
    "name": "payment_id",
    "baseName": "payment_id",
    "type": "string"
  },
  {
    "name": "time",
    "baseName": "time",
    "type": "number"
  },
  {
    "name": "mac",
    "baseName": "mac",
    "type": "string"
  }
];

// src/zalopay/models/disbursementQueryMerchantBalanceResponse.ts
var _DisbursementQueryMerchantBalanceResponse = class {
  static getAttributeTypeMap() {
    return _DisbursementQueryMerchantBalanceResponse.attributeTypeMap;
  }
};
var DisbursementQueryMerchantBalanceResponse = _DisbursementQueryMerchantBalanceResponse;
DisbursementQueryMerchantBalanceResponse.discriminator = void 0;
DisbursementQueryMerchantBalanceResponse.attributeTypeMap = [
  {
    "name": "return_code",
    "baseName": "return_code",
    "type": "number"
  },
  {
    "name": "return_message",
    "baseName": "return_message",
    "type": "string"
  },
  {
    "name": "sub_return_code",
    "baseName": "sub_return_code",
    "type": "number"
  },
  {
    "name": "sub_return_message",
    "baseName": "sub_return_message",
    "type": "string"
  },
  {
    "name": "data",
    "baseName": "data",
    "type": "DisbursementQueryMerchantBalanceResponseData"
  }
];

// src/zalopay/models/disbursementQueryMerchantBalanceResponseData.ts
var _DisbursementQueryMerchantBalanceResponseData = class {
  static getAttributeTypeMap() {
    return _DisbursementQueryMerchantBalanceResponseData.attributeTypeMap;
  }
};
var DisbursementQueryMerchantBalanceResponseData = _DisbursementQueryMerchantBalanceResponseData;
DisbursementQueryMerchantBalanceResponseData.discriminator = void 0;
DisbursementQueryMerchantBalanceResponseData.attributeTypeMap = [
  {
    "name": "balance",
    "baseName": "balance",
    "type": "number"
  }
];

// src/zalopay/models/disbursementQueryOrderRequest.ts
var _DisbursementQueryOrderRequest = class {
  static getAttributeTypeMap() {
    return _DisbursementQueryOrderRequest.attributeTypeMap;
  }
};
var DisbursementQueryOrderRequest = _DisbursementQueryOrderRequest;
DisbursementQueryOrderRequest.discriminator = void 0;
DisbursementQueryOrderRequest.attributeTypeMap = [
  {
    "name": "app_id",
    "baseName": "app_id",
    "type": "number"
  },
  {
    "name": "partner_order_id",
    "baseName": "partner_order_id",
    "type": "string"
  },
  {
    "name": "time",
    "baseName": "time",
    "type": "number"
  },
  {
    "name": "mac",
    "baseName": "mac",
    "type": "string"
  }
];

// src/zalopay/models/disbursementQueryOrderResponse.ts
var _DisbursementQueryOrderResponse = class {
  static getAttributeTypeMap() {
    return _DisbursementQueryOrderResponse.attributeTypeMap;
  }
};
var DisbursementQueryOrderResponse = _DisbursementQueryOrderResponse;
DisbursementQueryOrderResponse.discriminator = void 0;
DisbursementQueryOrderResponse.attributeTypeMap = [
  {
    "name": "return_code",
    "baseName": "return_code",
    "type": "number"
  },
  {
    "name": "return_message",
    "baseName": "return_message",
    "type": "string"
  },
  {
    "name": "sub_return_code",
    "baseName": "sub_return_code",
    "type": "number"
  },
  {
    "name": "sub_return_message",
    "baseName": "sub_return_message",
    "type": "string"
  },
  {
    "name": "data",
    "baseName": "data",
    "type": "DisbursementQueryOrderResponseData"
  }
];

// src/zalopay/models/disbursementQueryOrderResponseData.ts
var _DisbursementQueryOrderResponseData = class {
  static getAttributeTypeMap() {
    return _DisbursementQueryOrderResponseData.attributeTypeMap;
  }
};
var DisbursementQueryOrderResponseData = _DisbursementQueryOrderResponseData;
DisbursementQueryOrderResponseData.discriminator = void 0;
DisbursementQueryOrderResponseData.attributeTypeMap = [
  {
    "name": "order_id",
    "baseName": "order_id",
    "type": "string"
  },
  {
    "name": "status",
    "baseName": "status",
    "type": "number"
  },
  {
    "name": "m_u_id",
    "baseName": "m_u_id",
    "type": "string"
  },
  {
    "name": "phone",
    "baseName": "phone",
    "type": "string"
  },
  {
    "name": "amount",
    "baseName": "amount",
    "type": "number"
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string"
  },
  {
    "name": "partner_fee",
    "baseName": "partner_fee",
    "type": "number"
  },
  {
    "name": "zlp_fee",
    "baseName": "zlp_fee",
    "type": "number"
  },
  {
    "name": "extra_info",
    "baseName": "extra_info",
    "type": "string"
  },
  {
    "name": "time",
    "baseName": "time",
    "type": "number"
  },
  {
    "name": "zp_trans_id",
    "baseName": "zp_trans_id",
    "type": "string"
  },
  {
    "name": "result_url",
    "baseName": "result_url",
    "type": "string"
  }
];

// src/zalopay/models/disbursementQueryUserRequest.ts
var _DisbursementQueryUserRequest = class {
  static getAttributeTypeMap() {
    return _DisbursementQueryUserRequest.attributeTypeMap;
  }
};
var DisbursementQueryUserRequest = _DisbursementQueryUserRequest;
DisbursementQueryUserRequest.discriminator = void 0;
DisbursementQueryUserRequest.attributeTypeMap = [
  {
    "name": "request_id",
    "baseName": "request_id",
    "type": "string"
  },
  {
    "name": "app_id",
    "baseName": "app_id",
    "type": "number"
  },
  {
    "name": "phone",
    "baseName": "phone",
    "type": "string"
  },
  {
    "name": "time",
    "baseName": "time",
    "type": "number"
  },
  {
    "name": "mac",
    "baseName": "mac",
    "type": "string"
  }
];

// src/zalopay/models/disbursementQueryUserResponse.ts
var _DisbursementQueryUserResponse = class {
  static getAttributeTypeMap() {
    return _DisbursementQueryUserResponse.attributeTypeMap;
  }
};
var DisbursementQueryUserResponse = _DisbursementQueryUserResponse;
DisbursementQueryUserResponse.discriminator = void 0;
DisbursementQueryUserResponse.attributeTypeMap = [
  {
    "name": "return_code",
    "baseName": "return_code",
    "type": "number"
  },
  {
    "name": "return_message",
    "baseName": "return_message",
    "type": "string"
  },
  {
    "name": "sub_return_code",
    "baseName": "sub_return_code",
    "type": "number"
  },
  {
    "name": "sub_return_message",
    "baseName": "sub_return_message",
    "type": "string"
  },
  {
    "name": "data",
    "baseName": "data",
    "type": "DisbursementQueryUserResponseData"
  }
];

// src/zalopay/models/disbursementQueryUserResponseData.ts
var _DisbursementQueryUserResponseData = class {
  static getAttributeTypeMap() {
    return _DisbursementQueryUserResponseData.attributeTypeMap;
  }
};
var DisbursementQueryUserResponseData = _DisbursementQueryUserResponseData;
DisbursementQueryUserResponseData.discriminator = void 0;
DisbursementQueryUserResponseData.attributeTypeMap = [
  {
    "name": "reference_id",
    "baseName": "reference_id",
    "type": "string"
  },
  {
    "name": "m_u_id",
    "baseName": "m_u_id",
    "type": "string"
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string"
  },
  {
    "name": "phone",
    "baseName": "phone",
    "type": "string"
  },
  {
    "name": "onboarding_url",
    "baseName": "onboarding_url",
    "type": "string"
  }
];

// src/zalopay/models/disbursementTopupRequest.ts
var _DisbursementTopupRequest = class {
  static getAttributeTypeMap() {
    return _DisbursementTopupRequest.attributeTypeMap;
  }
};
var DisbursementTopupRequest = _DisbursementTopupRequest;
DisbursementTopupRequest.discriminator = void 0;
DisbursementTopupRequest.attributeTypeMap = [
  {
    "name": "app_id",
    "baseName": "app_id",
    "type": "number"
  },
  {
    "name": "payment_id",
    "baseName": "payment_id",
    "type": "string"
  },
  {
    "name": "partner_order_id",
    "baseName": "partner_order_id",
    "type": "string"
  },
  {
    "name": "m_u_id",
    "baseName": "m_u_id",
    "type": "string"
  },
  {
    "name": "amount",
    "baseName": "amount",
    "type": "number"
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string"
  },
  {
    "name": "partner_embed_data",
    "baseName": "partner_embed_data",
    "type": "string"
  },
  {
    "name": "reference_id",
    "baseName": "reference_id",
    "type": "string"
  },
  {
    "name": "extra_info",
    "baseName": "extra_info",
    "type": "string"
  },
  {
    "name": "time",
    "baseName": "time",
    "type": "number"
  },
  {
    "name": "sig",
    "baseName": "sig",
    "type": "string"
  }
];

// src/zalopay/models/disbursementTopupResponse.ts
var _DisbursementTopupResponse = class {
  static getAttributeTypeMap() {
    return _DisbursementTopupResponse.attributeTypeMap;
  }
};
var DisbursementTopupResponse = _DisbursementTopupResponse;
DisbursementTopupResponse.discriminator = void 0;
DisbursementTopupResponse.attributeTypeMap = [
  {
    "name": "return_code",
    "baseName": "return_code",
    "type": "number"
  },
  {
    "name": "return_message",
    "baseName": "return_message",
    "type": "string"
  },
  {
    "name": "sub_return_code",
    "baseName": "sub_return_code",
    "type": "number"
  },
  {
    "name": "sub_return_message",
    "baseName": "sub_return_message",
    "type": "string"
  },
  {
    "name": "data",
    "baseName": "data",
    "type": "DisbursementTopupResponseData"
  }
];

// src/zalopay/models/disbursementTopupResponseData.ts
var _DisbursementTopupResponseData = class {
  static getAttributeTypeMap() {
    return _DisbursementTopupResponseData.attributeTypeMap;
  }
};
var DisbursementTopupResponseData = _DisbursementTopupResponseData;
DisbursementTopupResponseData.discriminator = void 0;
DisbursementTopupResponseData.attributeTypeMap = [
  {
    "name": "order_id",
    "baseName": "order_id",
    "type": "string"
  },
  {
    "name": "status",
    "baseName": "status",
    "type": "number"
  },
  {
    "name": "m_u_id",
    "baseName": "m_u_id",
    "type": "string"
  },
  {
    "name": "phone",
    "baseName": "phone",
    "type": "string"
  },
  {
    "name": "amount",
    "baseName": "amount",
    "type": "number"
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string"
  },
  {
    "name": "partner_fee",
    "baseName": "partner_fee",
    "type": "number"
  },
  {
    "name": "zlp_fee",
    "baseName": "zlp_fee",
    "type": "number"
  },
  {
    "name": "extra_info",
    "baseName": "extra_info",
    "type": "string"
  },
  {
    "name": "time",
    "baseName": "time",
    "type": "number"
  },
  {
    "name": "upgrade_url",
    "baseName": "upgrade_url",
    "type": "string"
  }
];

// src/zalopay/models/gatewayBankItem.ts
var _GatewayBankItem = class {
  static getAttributeTypeMap() {
    return _GatewayBankItem.attributeTypeMap;
  }
};
var GatewayBankItem = _GatewayBankItem;
GatewayBankItem.discriminator = void 0;
GatewayBankItem.attributeTypeMap = [
  {
    "name": "bankcode",
    "baseName": "bankcode",
    "type": "string"
  },
  {
    "name": "name",
    "baseName": "name",
    "type": "string"
  },
  {
    "name": "displayorder",
    "baseName": "displayorder",
    "type": "number"
  },
  {
    "name": "pcmid",
    "baseName": "pcmid",
    "type": "number"
  },
  {
    "name": "minamount",
    "baseName": "minamount",
    "type": "number"
  },
  {
    "name": "maxamount",
    "baseName": "maxamount",
    "type": "number"
  }
];

// src/zalopay/models/gatewayGetListBanksResponse.ts
var _GatewayGetListBanksResponse = class {
  static getAttributeTypeMap() {
    return _GatewayGetListBanksResponse.attributeTypeMap;
  }
};
var GatewayGetListBanksResponse = _GatewayGetListBanksResponse;
GatewayGetListBanksResponse.discriminator = void 0;
GatewayGetListBanksResponse.attributeTypeMap = [
  {
    "name": "returncode",
    "baseName": "returncode",
    "type": "number"
  },
  {
    "name": "returnmessage",
    "baseName": "returnmessage",
    "type": "string"
  },
  {
    "name": "banks",
    "baseName": "banks",
    "type": "GatewayGetListBanksResponseBanks"
  }
];

// src/zalopay/models/gatewayGetListBanksResponseBanks.ts
var _GatewayGetListBanksResponseBanks = class {
  static getAttributeTypeMap() {
    return _GatewayGetListBanksResponseBanks.attributeTypeMap;
  }
};
var GatewayGetListBanksResponseBanks = _GatewayGetListBanksResponseBanks;
GatewayGetListBanksResponseBanks.discriminator = void 0;
GatewayGetListBanksResponseBanks.attributeTypeMap = [
  {
    "name": "_36",
    "baseName": "36",
    "type": "Array<GatewayBankItem>"
  },
  {
    "name": "_37",
    "baseName": "37",
    "type": "Array<GatewayBankItem>"
  },
  {
    "name": "_38",
    "baseName": "38",
    "type": "Array<GatewayBankItem>"
  },
  {
    "name": "_39",
    "baseName": "39",
    "type": "Array<GatewayBankItem>"
  },
  {
    "name": "_41",
    "baseName": "41",
    "type": "Array<GatewayBankItem>"
  }
];

// src/zalopay/models/orderCreateRequest.ts
var _OrderCreateRequest = class {
  static getAttributeTypeMap() {
    return _OrderCreateRequest.attributeTypeMap;
  }
};
var OrderCreateRequest = _OrderCreateRequest;
OrderCreateRequest.discriminator = void 0;
OrderCreateRequest.attributeTypeMap = [
  {
    "name": "app_id",
    "baseName": "app_id",
    "type": "number"
  },
  {
    "name": "app_user",
    "baseName": "app_user",
    "type": "string"
  },
  {
    "name": "app_trans_id",
    "baseName": "app_trans_id",
    "type": "string"
  },
  {
    "name": "app_time",
    "baseName": "app_time",
    "type": "number"
  },
  {
    "name": "amount",
    "baseName": "amount",
    "type": "number"
  },
  {
    "name": "title",
    "baseName": "title",
    "type": "string"
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string"
  },
  {
    "name": "callback_url",
    "baseName": "callback_url",
    "type": "string"
  },
  {
    "name": "redirect_url",
    "baseName": "redirect_url",
    "type": "string"
  },
  {
    "name": "device_info",
    "baseName": "device_info",
    "type": "string"
  },
  {
    "name": "item",
    "baseName": "item",
    "type": "string"
  },
  {
    "name": "embed_data",
    "baseName": "embed_data",
    "type": "string"
  },
  {
    "name": "mac",
    "baseName": "mac",
    "type": "string"
  },
  {
    "name": "product_code",
    "baseName": "product_code",
    "type": "OrderCreateRequest.ProductCodeEnum"
  },
  {
    "name": "bank_code",
    "baseName": "bank_code",
    "type": "string"
  },
  {
    "name": "phone",
    "baseName": "phone",
    "type": "string"
  },
  {
    "name": "email",
    "baseName": "email",
    "type": "string"
  },
  {
    "name": "address",
    "baseName": "address",
    "type": "string"
  }
];
((OrderCreateRequest3) => {
  let ProductCodeEnum;
  ((ProductCodeEnum2) => {
    ProductCodeEnum2["Agreement"] = "AGREEMENT";
  })(ProductCodeEnum = OrderCreateRequest3.ProductCodeEnum || (OrderCreateRequest3.ProductCodeEnum = {}));
})(OrderCreateRequest || (OrderCreateRequest = {}));

// src/zalopay/models/orderCreateResponse.ts
var _OrderCreateResponse = class {
  static getAttributeTypeMap() {
    return _OrderCreateResponse.attributeTypeMap;
  }
};
var OrderCreateResponse = _OrderCreateResponse;
OrderCreateResponse.discriminator = void 0;
OrderCreateResponse.attributeTypeMap = [
  {
    "name": "return_code",
    "baseName": "return_code",
    "type": "number"
  },
  {
    "name": "return_message",
    "baseName": "return_message",
    "type": "string"
  },
  {
    "name": "sub_return_code",
    "baseName": "sub_return_code",
    "type": "number"
  },
  {
    "name": "sub_return_message",
    "baseName": "sub_return_message",
    "type": "string"
  },
  {
    "name": "zp_trans_token",
    "baseName": "zp_trans_token",
    "type": "string"
  },
  {
    "name": "order_url",
    "baseName": "order_url",
    "type": "string"
  }
];

// src/zalopay/models/orderQueryRequest.ts
var _OrderQueryRequest = class {
  static getAttributeTypeMap() {
    return _OrderQueryRequest.attributeTypeMap;
  }
};
var OrderQueryRequest = _OrderQueryRequest;
OrderQueryRequest.discriminator = void 0;
OrderQueryRequest.attributeTypeMap = [
  {
    "name": "app_id",
    "baseName": "app_id",
    "type": "number"
  },
  {
    "name": "app_trans_id",
    "baseName": "app_trans_id",
    "type": "string"
  },
  {
    "name": "mac",
    "baseName": "mac",
    "type": "string"
  }
];

// src/zalopay/models/orderQueryResponse.ts
var _OrderQueryResponse = class {
  static getAttributeTypeMap() {
    return _OrderQueryResponse.attributeTypeMap;
  }
};
var OrderQueryResponse = _OrderQueryResponse;
OrderQueryResponse.discriminator = void 0;
OrderQueryResponse.attributeTypeMap = [
  {
    "name": "return_code",
    "baseName": "return_code",
    "type": "number"
  },
  {
    "name": "return_message",
    "baseName": "return_message",
    "type": "string"
  },
  {
    "name": "sub_return_code",
    "baseName": "sub_return_code",
    "type": "number"
  },
  {
    "name": "sub_return_message",
    "baseName": "sub_return_message",
    "type": "string"
  },
  {
    "name": "is_processing",
    "baseName": "is_processing",
    "type": "boolean"
  },
  {
    "name": "amount",
    "baseName": "amount",
    "type": "number"
  },
  {
    "name": "zp_trans_id",
    "baseName": "zp_trans_id",
    "type": "number"
  }
];

// src/zalopay/models/refundCreateRequest.ts
var _RefundCreateRequest = class {
  static getAttributeTypeMap() {
    return _RefundCreateRequest.attributeTypeMap;
  }
};
var RefundCreateRequest = _RefundCreateRequest;
RefundCreateRequest.discriminator = void 0;
RefundCreateRequest.attributeTypeMap = [
  {
    "name": "app_id",
    "baseName": "app_id",
    "type": "number"
  },
  {
    "name": "m_refund_id",
    "baseName": "m_refund_id",
    "type": "string"
  },
  {
    "name": "zp_trans_id",
    "baseName": "zp_trans_id",
    "type": "string"
  },
  {
    "name": "amount",
    "baseName": "amount",
    "type": "number"
  },
  {
    "name": "timestamp",
    "baseName": "timestamp",
    "type": "number"
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string"
  },
  {
    "name": "mac",
    "baseName": "mac",
    "type": "string"
  }
];

// src/zalopay/models/refundCreateResponse.ts
var _RefundCreateResponse = class {
  static getAttributeTypeMap() {
    return _RefundCreateResponse.attributeTypeMap;
  }
};
var RefundCreateResponse = _RefundCreateResponse;
RefundCreateResponse.discriminator = void 0;
RefundCreateResponse.attributeTypeMap = [
  {
    "name": "return_code",
    "baseName": "return_code",
    "type": "number"
  },
  {
    "name": "return_message",
    "baseName": "return_message",
    "type": "string"
  },
  {
    "name": "sub_return_code",
    "baseName": "sub_return_code",
    "type": "number"
  },
  {
    "name": "sub_return_message",
    "baseName": "sub_return_message",
    "type": "string"
  },
  {
    "name": "refund_id",
    "baseName": "refund_id",
    "type": "number"
  }
];

// src/zalopay/models/refundQueryRequest.ts
var _RefundQueryRequest = class {
  static getAttributeTypeMap() {
    return _RefundQueryRequest.attributeTypeMap;
  }
};
var RefundQueryRequest = _RefundQueryRequest;
RefundQueryRequest.discriminator = void 0;
RefundQueryRequest.attributeTypeMap = [
  {
    "name": "app_id",
    "baseName": "app_id",
    "type": "number"
  },
  {
    "name": "m_refund_id",
    "baseName": "m_refund_id",
    "type": "string"
  },
  {
    "name": "timestamp",
    "baseName": "timestamp",
    "type": "number"
  },
  {
    "name": "mac",
    "baseName": "mac",
    "type": "string"
  }
];

// src/zalopay/models/refundQueryResponse.ts
var _RefundQueryResponse = class {
  static getAttributeTypeMap() {
    return _RefundQueryResponse.attributeTypeMap;
  }
};
var RefundQueryResponse = _RefundQueryResponse;
RefundQueryResponse.discriminator = void 0;
RefundQueryResponse.attributeTypeMap = [
  {
    "name": "return_code",
    "baseName": "return_code",
    "type": "number"
  },
  {
    "name": "return_message",
    "baseName": "return_message",
    "type": "string"
  },
  {
    "name": "sub_return_code",
    "baseName": "sub_return_code",
    "type": "number"
  },
  {
    "name": "sub_return_message",
    "baseName": "sub_return_message",
    "type": "string"
  }
];

// src/zalopay/models/zodCreateInvoiceRequest.ts
var _ZodCreateInvoiceRequest = class {
  static getAttributeTypeMap() {
    return _ZodCreateInvoiceRequest.attributeTypeMap;
  }
};
var ZodCreateInvoiceRequest = _ZodCreateInvoiceRequest;
ZodCreateInvoiceRequest.discriminator = void 0;
ZodCreateInvoiceRequest.attributeTypeMap = [
  {
    "name": "appId",
    "baseName": "appId",
    "type": "string"
  },
  {
    "name": "mcRefId",
    "baseName": "mcRefId",
    "type": "string"
  },
  {
    "name": "hubId",
    "baseName": "hubId",
    "type": "string"
  },
  {
    "name": "driverId",
    "baseName": "driverId",
    "type": "string"
  },
  {
    "name": "amount",
    "baseName": "amount",
    "type": "number"
  },
  {
    "name": "receiver",
    "baseName": "receiver",
    "type": "ZodCreateInvoiceRequestReceiver"
  },
  {
    "name": "orderInfo",
    "baseName": "orderInfo",
    "type": "Array<ZodCreateInvoiceRequestOrderInfoInner>"
  },
  {
    "name": "mcExtInfo",
    "baseName": "mcExtInfo",
    "type": "string"
  },
  {
    "name": "mac",
    "baseName": "mac",
    "type": "string"
  }
];

// src/zalopay/models/zodCreateInvoiceRequestOrderInfoInner.ts
var _ZodCreateInvoiceRequestOrderInfoInner = class {
  static getAttributeTypeMap() {
    return _ZodCreateInvoiceRequestOrderInfoInner.attributeTypeMap;
  }
};
var ZodCreateInvoiceRequestOrderInfoInner = _ZodCreateInvoiceRequestOrderInfoInner;
ZodCreateInvoiceRequestOrderInfoInner.discriminator = void 0;
ZodCreateInvoiceRequestOrderInfoInner.attributeTypeMap = [
  {
    "name": "trackingNumber",
    "baseName": "trackingNumber",
    "type": "string"
  },
  {
    "name": "description",
    "baseName": "description",
    "type": "string"
  },
  {
    "name": "amount",
    "baseName": "amount",
    "type": "number"
  }
];

// src/zalopay/models/zodCreateInvoiceRequestReceiver.ts
var _ZodCreateInvoiceRequestReceiver = class {
  static getAttributeTypeMap() {
    return _ZodCreateInvoiceRequestReceiver.attributeTypeMap;
  }
};
var ZodCreateInvoiceRequestReceiver = _ZodCreateInvoiceRequestReceiver;
ZodCreateInvoiceRequestReceiver.discriminator = void 0;
ZodCreateInvoiceRequestReceiver.attributeTypeMap = [
  {
    "name": "contact",
    "baseName": "contact",
    "type": "string"
  }
];

// src/zalopay/models/zodCreateInvoiceResponse.ts
var _ZodCreateInvoiceResponse = class {
  static getAttributeTypeMap() {
    return _ZodCreateInvoiceResponse.attributeTypeMap;
  }
};
var ZodCreateInvoiceResponse = _ZodCreateInvoiceResponse;
ZodCreateInvoiceResponse.discriminator = void 0;
ZodCreateInvoiceResponse.attributeTypeMap = [
  {
    "name": "orderUrl",
    "baseName": "orderUrl",
    "type": "string"
  }
];

// src/zalopay/models/zodQueryInvoiceResponse.ts
var _ZodQueryInvoiceResponse = class {
  static getAttributeTypeMap() {
    return _ZodQueryInvoiceResponse.attributeTypeMap;
  }
};
var ZodQueryInvoiceResponse = _ZodQueryInvoiceResponse;
ZodQueryInvoiceResponse.discriminator = void 0;
ZodQueryInvoiceResponse.attributeTypeMap = [
  {
    "name": "orderUrl",
    "baseName": "orderUrl",
    "type": "string"
  }
];

// src/zalopay/models/zodQueryStatusResponse.ts
var _ZodQueryStatusResponse = class {
  static getAttributeTypeMap() {
    return _ZodQueryStatusResponse.attributeTypeMap;
  }
};
var ZodQueryStatusResponse = _ZodQueryStatusResponse;
ZodQueryStatusResponse.discriminator = void 0;
ZodQueryStatusResponse.attributeTypeMap = [
  {
    "name": "status",
    "baseName": "status",
    "type": "number"
  },
  {
    "name": "amount",
    "baseName": "amount",
    "type": "string"
  },
  {
    "name": "zpTransId",
    "baseName": "zpTransId",
    "type": "string"
  }
];

// src/zalopay/models/models.ts
var primitives = [
  "string",
  "boolean",
  "double",
  "integer",
  "long",
  "float",
  "number",
  "any"
];
var enumsMap = {
  "AgreementBindRequest.BindingTypeEnum": AgreementBindRequest.BindingTypeEnum,
  "OrderCreateRequest.ProductCodeEnum": OrderCreateRequest.ProductCodeEnum
};
var typeMap = {
  "AgreementBalanceRequest": AgreementBalanceRequest,
  "AgreementBalanceResponse": AgreementBalanceResponse,
  "AgreementBalanceResponseDataInner": AgreementBalanceResponseDataInner,
  "AgreementBindRequest": AgreementBindRequest,
  "AgreementBindResponse": AgreementBindResponse,
  "AgreementPayRequest": AgreementPayRequest,
  "AgreementPayResponse": AgreementPayResponse,
  "AgreementQueryRequest": AgreementQueryRequest,
  "AgreementQueryResponse": AgreementQueryResponse,
  "AgreementQueryResponseData": AgreementQueryResponseData,
  "AgreementQueryUserRequest": AgreementQueryUserRequest,
  "AgreementQueryUserResponse": AgreementQueryUserResponse,
  "AgreementUnbindRequest": AgreementUnbindRequest,
  "AgreementUnbindResponse": AgreementUnbindResponse,
  "DisbursementQueryMerchantBalanceRequest": DisbursementQueryMerchantBalanceRequest,
  "DisbursementQueryMerchantBalanceResponse": DisbursementQueryMerchantBalanceResponse,
  "DisbursementQueryMerchantBalanceResponseData": DisbursementQueryMerchantBalanceResponseData,
  "DisbursementQueryOrderRequest": DisbursementQueryOrderRequest,
  "DisbursementQueryOrderResponse": DisbursementQueryOrderResponse,
  "DisbursementQueryOrderResponseData": DisbursementQueryOrderResponseData,
  "DisbursementQueryUserRequest": DisbursementQueryUserRequest,
  "DisbursementQueryUserResponse": DisbursementQueryUserResponse,
  "DisbursementQueryUserResponseData": DisbursementQueryUserResponseData,
  "DisbursementTopupRequest": DisbursementTopupRequest,
  "DisbursementTopupResponse": DisbursementTopupResponse,
  "DisbursementTopupResponseData": DisbursementTopupResponseData,
  "GatewayBankItem": GatewayBankItem,
  "GatewayGetListBanksResponse": GatewayGetListBanksResponse,
  "GatewayGetListBanksResponseBanks": GatewayGetListBanksResponseBanks,
  "OrderCreateRequest": OrderCreateRequest,
  "OrderCreateResponse": OrderCreateResponse,
  "OrderQueryRequest": OrderQueryRequest,
  "OrderQueryResponse": OrderQueryResponse,
  "RefundCreateRequest": RefundCreateRequest,
  "RefundCreateResponse": RefundCreateResponse,
  "RefundQueryRequest": RefundQueryRequest,
  "RefundQueryResponse": RefundQueryResponse,
  "ZodCreateInvoiceRequest": ZodCreateInvoiceRequest,
  "ZodCreateInvoiceRequestOrderInfoInner": ZodCreateInvoiceRequestOrderInfoInner,
  "ZodCreateInvoiceRequestReceiver": ZodCreateInvoiceRequestReceiver,
  "ZodCreateInvoiceResponse": ZodCreateInvoiceResponse,
  "ZodQueryInvoiceResponse": ZodQueryInvoiceResponse,
  "ZodQueryStatusResponse": ZodQueryStatusResponse
};
var ObjectSerializer = class {
  static findCorrectType(data, expectedType) {
    if (data == void 0) {
      return expectedType;
    } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
      return expectedType;
    } else if (expectedType === "Date") {
      return expectedType;
    } else {
      if (enumsMap[expectedType]) {
        return expectedType;
      }
      if (!typeMap[expectedType]) {
        return expectedType;
      }
      const discriminatorProperty = typeMap[expectedType].discriminator;
      if (discriminatorProperty == null) {
        return expectedType;
      } else {
        if (data[discriminatorProperty]) {
          const discriminatorType = data[discriminatorProperty];
          if (typeMap[discriminatorType]) {
            return discriminatorType;
          } else {
            return expectedType;
          }
        } else {
          return expectedType;
        }
      }
    }
  }
  static serialize(data, type) {
    if (data == void 0) {
      return data;
    } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
      return data;
    } else if (type.lastIndexOf("Array<", 0) === 0) {
      let subType = type.replace("Array<", "");
      subType = subType.substring(0, subType.length - 1);
      const transformedData = [];
      for (let index = 0; index < data.length; index++) {
        const datum = data[index];
        transformedData.push(ObjectSerializer.serialize(datum, subType));
      }
      return transformedData;
    } else if (type === "Date") {
      return data.toISOString();
    } else if (type === "SaleToAcquirerData") {
      const dataString = JSON.stringify(data);
      return Buffer.from(dataString).toString("base64");
    } else {
      if (enumsMap[type]) {
        return data;
      }
      if (!typeMap[type]) {
        return data;
      }
      type = this.findCorrectType(data, type);
      const attributeTypes = typeMap[type].getAttributeTypeMap();
      const instance = {};
      for (let index = 0; index < attributeTypes.length; index++) {
        const attributeType = attributeTypes[index];
        instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
      }
      return instance;
    }
  }
  static deserialize(data, type) {
    type = ObjectSerializer.findCorrectType(data, type);
    if (data == void 0) {
      return data;
    } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
      return data;
    } else if (type.lastIndexOf("Array<", 0) === 0) {
      let subType = type.replace("Array<", "");
      subType = subType.substring(0, subType.length - 1);
      const transformedData = [];
      for (let index = 0; index < data.length; index++) {
        const datum = data[index];
        transformedData.push(ObjectSerializer.deserialize(datum, subType));
      }
      return transformedData;
    } else if (type === "Date") {
      return new Date(data);
    } else {
      if (enumsMap[type]) {
        return data;
      }
      if (!typeMap[type]) {
        return data;
      }
      const instance = new typeMap[type]();
      const attributeTypes = typeMap[type].getAttributeTypeMap();
      for (let index = 0; index < attributeTypes.length; index++) {
        const attributeType = attributeTypes[index];
        instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
      }
      return instance;
    }
  }
};

// src/zalopay/service.ts
var Service = class {
  constructor(client) {
    this.config = client.config;
    this.httpClient = client.httpClient;
  }
};
var service_default = Service;

// src/zalopay/services/resource.ts
var Resource = class {
  constructor(service, endpoint) {
    this.service = service;
    this.endpoint = endpoint;
  }
  request(method, data, requestOptions) {
    const headers = {
      Accept: "application/json",
      "Content-Type": "application/json"
    };
    return this.service.httpClient.request({
      method,
      url: this.endpoint,
      data,
      headers,
      params: requestOptions == null ? void 0 : requestOptions.params
    });
  }
};
var resource_default = Resource;

// src/zalopay/services/resource/tokenizationResource.ts
var TokenizationResource = class extends resource_default {
  constructor(service, endpoint) {
    super(
      service,
      endpoint
    );
  }
};
var tokenizationResource_default = TokenizationResource;

// src/zalopay/helpers/getJsonResponse.ts
function getJsonResponse(_0, _1, _2) {
  return __async(this, arguments, function* (resource, method, jsonRequest, requestOptions = {}) {
    const request = typeof jsonRequest === "string" ? jsonRequest : JSON.stringify(jsonRequest);
    const response = yield resource.request(method, request, requestOptions);
    try {
      const respJson = typeof response === "string" ? JSON.parse(response) : response;
      return respJson.data;
    } catch (e) {
      console.error("Error while get response data");
      throw e;
    }
  });
}
var getJsonResponse_default = getJsonResponse;

// src/zalopay/utils/hmacUtils.ts
import * as CryptoJS from "crypto-js";
var HmacUtils = class {
  calculateHmac(data, key) {
    return CryptoJS.HmacSHA256(data, key).toString();
  }
};
HmacUtils.DATA_SEPARATOR = "|";
var hmacUtils_default = HmacUtils;

// src/zalopay/services/tokenization.ts
var Tokenization = class extends service_default {
  constructor(client) {
    super(client);
    this._bind = new tokenizationResource_default(this, "/v2/agreement/bind");
    this._unbind = new tokenizationResource_default(this, "/v2/agreement/unbind");
    this._query = new tokenizationResource_default(this, "/v2/agreement/query");
    this._balance = new tokenizationResource_default(this, "/v2/agreement/balance");
    this._pay = new tokenizationResource_default(this, "/v2/agreement/pay");
    this._query_user = new tokenizationResource_default(
      this,
      "/v2/agreement/query_user"
    );
    this.hmacUtils = new hmacUtils_default();
  }
  bind(bindRequest) {
    return __async(this, null, function* () {
      bindRequest.app_id || (bindRequest.app_id = +this.config.appId);
      const dataSign = [
        bindRequest.app_id,
        bindRequest.app_trans_id,
        bindRequest.binding_data,
        bindRequest.binding_type,
        bindRequest.identifier,
        bindRequest.max_amount,
        bindRequest.req_date
      ].join(hmacUtils_default.DATA_SEPARATOR);
      bindRequest.mac = this.hmacUtils.calculateHmac(dataSign, this.config.key1);
      const response = yield getJsonResponse_default(this._bind, "post", bindRequest);
      return ObjectSerializer.deserialize(response, "AgreementBindResponse");
    });
  }
  unbind(unbindRequest) {
    return __async(this, null, function* () {
      unbindRequest.app_id || (unbindRequest.app_id = +this.config.appId);
      const dataSign = [
        unbindRequest.app_id,
        unbindRequest.identifier,
        unbindRequest.binding_id,
        unbindRequest.req_date
      ].join(hmacUtils_default.DATA_SEPARATOR);
      unbindRequest.mac = this.hmacUtils.calculateHmac(
        dataSign,
        this.config.key1
      );
      const response = yield getJsonResponse_default(this._unbind, "post", unbindRequest);
      return ObjectSerializer.deserialize(response, "AgreementUnbindResponse");
    });
  }
  pay(payRequest) {
    return __async(this, null, function* () {
      payRequest.app_id || (payRequest.app_id = +this.config.appId);
      const dataSign = [
        payRequest.app_id,
        payRequest.identifier,
        payRequest.zp_trans_token,
        payRequest.pay_token,
        payRequest.req_date
      ].join(hmacUtils_default.DATA_SEPARATOR);
      payRequest.mac = this.hmacUtils.calculateHmac(dataSign, this.config.key1);
      const response = yield getJsonResponse_default(this._pay, "post", payRequest);
      return ObjectSerializer.deserialize(response, "AgreementPayResponse");
    });
  }
  query(queryRequest) {
    return __async(this, null, function* () {
      queryRequest.app_id || (queryRequest.app_id = +this.config.appId);
      const dataSign = [
        queryRequest.app_id,
        queryRequest.app_trans_id,
        queryRequest.req_date
      ].join(hmacUtils_default.DATA_SEPARATOR);
      queryRequest.mac = this.hmacUtils.calculateHmac(dataSign, this.config.key1);
      const response = yield getJsonResponse_default(this._query, "post", queryRequest);
      return ObjectSerializer.deserialize(response, "AgreementQueryResponse");
    });
  }
  balance(balanceRequest) {
    return __async(this, null, function* () {
      balanceRequest.app_id || (balanceRequest.app_id = +this.config.appId);
      const dataSign = [
        balanceRequest.app_id,
        balanceRequest.pay_token,
        balanceRequest.identifier,
        balanceRequest.amount,
        balanceRequest.req_date
      ].join(hmacUtils_default.DATA_SEPARATOR);
      balanceRequest.mac = this.hmacUtils.calculateHmac(
        dataSign,
        this.config.key1
      );
      const response = yield getJsonResponse_default(this._balance, "post", balanceRequest);
      return ObjectSerializer.deserialize(response, "AgreementBalanceResponse");
    });
  }
  queryUser(queryUserRequest) {
    return __async(this, null, function* () {
      queryUserRequest.app_id || (queryUserRequest.app_id = +this.config.appId);
      const dataSign = [
        queryUserRequest.app_id,
        queryUserRequest.access_token,
        queryUserRequest.req_date
      ].join(hmacUtils_default.DATA_SEPARATOR);
      queryUserRequest.mac = this.hmacUtils.calculateHmac(
        dataSign,
        this.config.key1
      );
      const response = yield getJsonResponse_default(this._query_user, "post", queryUserRequest);
      return ObjectSerializer.deserialize(response, "AgreementQueryUserResponse");
    });
  }
};
var tokenization_default = Tokenization;

// src/zalopay/services/resource/orderResource.ts
var OrderResource = class extends resource_default {
  constructor(service, endpoint) {
    super(
      service,
      endpoint
    );
  }
};
var orderResource_default = OrderResource;

// src/zalopay/services/order.ts
var Order = class extends service_default {
  constructor(client) {
    super(client);
    this._create = new orderResource_default(this, "/v2/create");
    this._query = new orderResource_default(this, "/v2/query");
    this.hmacUtils = new hmacUtils_default();
  }
  create(createRequest) {
    return __async(this, null, function* () {
      createRequest.app_id || (createRequest.app_id = +this.config.appId);
      const dataSign = [
        createRequest.app_id,
        createRequest.app_trans_id,
        createRequest.app_user,
        createRequest.amount,
        createRequest.app_time,
        createRequest.embed_data,
        createRequest.item
      ].join(hmacUtils_default.DATA_SEPARATOR);
      createRequest.mac = this.hmacUtils.calculateHmac(
        dataSign,
        this.config.key1
      );
      const response = yield getJsonResponse_default(this._create, "post", createRequest);
      return ObjectSerializer.deserialize(response, "OrderCreateResponse");
    });
  }
  query(queryRequest) {
    return __async(this, null, function* () {
      queryRequest.app_id || (queryRequest.app_id = +this.config.appId);
      const dataSign = [
        queryRequest.app_id,
        queryRequest.app_trans_id,
        this.config.key1
      ].join(hmacUtils_default.DATA_SEPARATOR);
      queryRequest.mac = this.hmacUtils.calculateHmac(dataSign, this.config.key1);
      const response = yield getJsonResponse_default(this._query, "post", queryRequest);
      return ObjectSerializer.deserialize(response, "OrderQueryResponse");
    });
  }
};
var order_default = Order;

// src/zalopay/services/resource/refundResource.ts
var RefundResource = class extends resource_default {
  constructor(service, endpoint) {
    super(
      service,
      endpoint
    );
  }
};
var refundResource_default = RefundResource;

// src/zalopay/services/refund.ts
var Refund = class extends service_default {
  constructor(client) {
    super(client);
    this._create = new refundResource_default(this, "/v2/refund");
    this._query = new refundResource_default(this, "/v2/query_refund");
    this.hmacUtils = new hmacUtils_default();
  }
  create(createRequest) {
    return __async(this, null, function* () {
      createRequest.app_id || (createRequest.app_id = +this.config.appId);
      const dataSign = [
        createRequest.app_id,
        createRequest.zp_trans_id,
        createRequest.amount,
        createRequest.description,
        createRequest.timestamp
      ].join(hmacUtils_default.DATA_SEPARATOR);
      createRequest.mac = this.hmacUtils.calculateHmac(
        dataSign,
        this.config.key1
      );
      const response = yield getJsonResponse_default(this._create, "post", createRequest);
      return ObjectSerializer.deserialize(response, "RefundCreateResponse");
    });
  }
  query(queryRequest) {
    return __async(this, null, function* () {
      queryRequest.app_id || (queryRequest.app_id = +this.config.appId);
      const dataSign = [
        queryRequest.app_id,
        queryRequest.m_refund_id,
        queryRequest.timestamp
      ].join(hmacUtils_default.DATA_SEPARATOR);
      queryRequest.mac = this.hmacUtils.calculateHmac(dataSign, this.config.key1);
      const response = yield getJsonResponse_default(this._query, "post", queryRequest);
      return ObjectSerializer.deserialize(response, "RefundQueryResponse");
    });
  }
};
var refund_default = Refund;

// src/zalopay/services/resource/disbursementResource.ts
var DisbursementResource = class extends resource_default {
  constructor(service, endpoint) {
    super(
      service,
      endpoint
    );
  }
};
var disbursementResource_default = DisbursementResource;

// src/zalopay/utils/rsaUtils.ts
import NodeRSA from "node-rsa";
var RSAUtils = class {
  static fromConfig(config, options) {
    var _a;
    return new RSAUtils((_a = config.privateKey) != null ? _a : "", options.scheme);
  }
  constructor(privateKey, scheme) {
    this.rsa = new NodeRSA(privateKey, scheme != null ? scheme : "pkcs1");
  }
  /**
   * 
   * @param data The data to sign
   * @param encoding encoding for output result, may be 'buffer', 'binary', 'hex' or 'base64'. Default 'buffer'
   * @param sourceEncoding source encoding, works only with string buffer. Can take standard Node.js Buffer encodings (hex, utf8, base64, etc). 'utf8' by default.
   * @returns signed data
   */
  sign(data, encoding, sourceEncoding) {
    return this.rsa.sign(Buffer.from(data), encoding != null ? encoding : "buffer", sourceEncoding != null ? sourceEncoding : "utf8");
  }
  /**
   * 
   * @param sourceData The data for check
   * @param signature The signature for check
   * @param encoding encoding for output result, may be 'buffer', 'binary', 'hex' or 'base64'. Default 'buffer'
   * @param sourceEncoding source encoding, works only with string buffer. Can take standard Node.js Buffer encodings (hex, utf8, base64, etc). 'utf8' by default.
   * @param signatureEncoding encoding of given signature. May be 'buffer', 'binary', 'hex' or 'base64'.
   * @returns True if signature is valid
   */
  verify(sourceData, signature, sourceEncoding, signatureEncoding) {
    return this.rsa.verify(Buffer.from(sourceData), signature, sourceEncoding != null ? sourceEncoding : "utf8", signatureEncoding != null ? signatureEncoding : "buffer");
  }
};
var rsaUtils_default = RSAUtils;

// src/zalopay/services/disbursement.ts
var Disbursement = class extends service_default {
  constructor(client) {
    super(client);
    if (!client.config.paymentId || !client.config.privateKey) {
      throw new Error(
        "The paymentId and privateKey config keys are required for Disbursement service"
      );
    }
    this._query_merchant_balance = new disbursementResource_default(
      this,
      "/v2/disbursement/balance"
    );
    this._query_user = new disbursementResource_default(this, "/v2/disbursement/user");
    this._topup = new disbursementResource_default(this, "/v2/disbursement/topup");
    this._query_order = new disbursementResource_default(this, "/v2/disbursement/txn");
    this.hmacUtils = new hmacUtils_default();
    this.rsaUtils = rsaUtils_default.fromConfig(client.config, { scheme: "pkcs8" });
  }
  queryMerchantBalance(balanceRequest) {
    return __async(this, null, function* () {
      var _a;
      balanceRequest.app_id || (balanceRequest.app_id = +this.config.appId);
      balanceRequest.payment_id = (_a = balanceRequest.payment_id) != null ? _a : this.config.paymentId;
      const dataSign = [
        balanceRequest.app_id,
        balanceRequest.payment_id,
        balanceRequest.time
      ].join(hmacUtils_default.DATA_SEPARATOR);
      balanceRequest.mac = this.hmacUtils.calculateHmac(
        dataSign,
        this.config.key1
      );
      const response = yield getJsonResponse_default(this._query_merchant_balance, "post", balanceRequest);
      return ObjectSerializer.deserialize(
        response,
        "DisbursementQueryMerchantBalanceResponse"
      );
    });
  }
  queryUser(queryUserRequest) {
    return __async(this, null, function* () {
      queryUserRequest.app_id || (queryUserRequest.app_id = +this.config.appId);
      const dataSign = [
        queryUserRequest.app_id,
        queryUserRequest.phone,
        queryUserRequest.time
      ].join(hmacUtils_default.DATA_SEPARATOR);
      queryUserRequest.mac = this.hmacUtils.calculateHmac(
        dataSign,
        this.config.key1
      );
      const response = yield getJsonResponse_default(this._query_user, "post", queryUserRequest);
      return ObjectSerializer.deserialize(
        response,
        "DisbursementQueryUserResponse"
      );
    });
  }
  topup(payRequest) {
    return __async(this, null, function* () {
      var _a;
      payRequest.app_id || (payRequest.app_id = +this.config.appId);
      payRequest.payment_id = (_a = payRequest.payment_id) != null ? _a : this.config.paymentId;
      const dataSign = [
        payRequest.app_id,
        payRequest.payment_id,
        payRequest.partner_order_id,
        payRequest.m_u_id,
        payRequest.amount,
        payRequest.description,
        payRequest.partner_embed_data,
        payRequest.extra_info,
        payRequest.time
      ].join(hmacUtils_default.DATA_SEPARATOR);
      const mac = this.hmacUtils.calculateHmac(dataSign, this.config.key1);
      payRequest.sig = this.rsaUtils.sign(mac, "base64", "utf8");
      const response = yield getJsonResponse_default(this._topup, "post", payRequest);
      return ObjectSerializer.deserialize(response, "DisbursementTopupResponse");
    });
  }
  queryOrder(queryRequest) {
    return __async(this, null, function* () {
      queryRequest.app_id || (queryRequest.app_id = +this.config.appId);
      const dataSign = [
        queryRequest.app_id,
        queryRequest.partner_order_id,
        queryRequest.time
      ].join(hmacUtils_default.DATA_SEPARATOR);
      queryRequest.mac = this.hmacUtils.calculateHmac(dataSign, this.config.key1);
      const response = yield getJsonResponse_default(this._query_order, "post", queryRequest);
      return ObjectSerializer.deserialize(
        response,
        "DisbursementQueryOrderResponse"
      );
    });
  }
};
var disbursement_default = Disbursement;

// src/zalopay/services/resource/zodResource.ts
var ZodResource = class extends resource_default {
  constructor(service, endpoint) {
    super(service, endpoint);
  }
};
var zodResource_default = ZodResource;

// src/zalopay/services/zod.ts
var Zod = class extends service_default {
  constructor(client) {
    client.httpClient.defaults.baseURL = client.config.env === "sandbox" ? "https://sbapimep.zalopay.vn" : "https://apimep.zalopay.vn/";
    super(client);
    this._create = new zodResource_default(this, "/v2/zod");
    this._query_invoice = new zodResource_default(this, "/v2/zod/invoice");
    this._query_status = new zodResource_default(this, "/v2/zod/status");
    this.hmacUtils = new hmacUtils_default();
  }
  createInvoice(createRequest) {
    return __async(this, null, function* () {
      createRequest.appId || (createRequest.appId = this.config.appId);
      const dataSign = [
        createRequest.appId,
        createRequest.mcRefId,
        createRequest.amount,
        createRequest.mcExtInfo
      ].join(hmacUtils_default.DATA_SEPARATOR);
      createRequest.mac = this.hmacUtils.calculateHmac(
        dataSign,
        this.config.key1
      );
      const response = yield getJsonResponse_default(this._create, "post", createRequest);
      return ObjectSerializer.deserialize(response, "ZodCreateInvoiceResponse");
    });
  }
  queryInvoice(mcRefId, appId) {
    return __async(this, null, function* () {
      const requestAppId = appId || (appId = this.config.appId);
      const dataSign = [requestAppId, mcRefId].join(hmacUtils_default.DATA_SEPARATOR);
      const mac = this.hmacUtils.calculateHmac(dataSign, this.config.key1);
      const requestParams = {
        appId: requestAppId,
        mcRefId,
        mac
      };
      const response = yield getJsonResponse_default(
        this._query_invoice,
        "get",
        "",
        {
          params: new URLSearchParams(requestParams)
        }
      );
      return ObjectSerializer.deserialize(response, "ZodQueryInvoiceResponse");
    });
  }
  queryStatus(mcRefId, appId) {
    return __async(this, null, function* () {
      const requestAppId = appId || (appId = this.config.appId);
      const dataSign = [requestAppId, mcRefId].join(hmacUtils_default.DATA_SEPARATOR);
      const mac = this.hmacUtils.calculateHmac(dataSign, this.config.key1);
      const requestParams = {
        appId: requestAppId,
        mcRefId,
        mac
      };
      const response = yield getJsonResponse_default(
        this._query_status,
        "get",
        "",
        {
          params: new URLSearchParams(requestParams)
        }
      );
      return ObjectSerializer.deserialize(response, "ZodQueryStatusResponse");
    });
  }
};
var zod_default = Zod;

// src/zalopay/services/securityProvider.ts
import * as CryptoJS2 from "crypto-js";
var SecurityProvider = class {
  constructor(client) {
    this.config = client.config;
  }
  getVerifyMacString(data) {
    return CryptoJS2.HmacSHA256(data, this.config.key2).toString();
  }
};
export {
  AgreementBalanceRequest,
  AgreementBalanceResponse,
  AgreementBalanceResponseDataInner,
  AgreementBindRequest,
  AgreementBindResponse,
  AgreementPayRequest,
  AgreementPayResponse,
  AgreementQueryRequest,
  AgreementQueryResponse,
  AgreementQueryResponseData,
  AgreementQueryUserRequest,
  AgreementQueryUserResponse,
  AgreementUnbindRequest,
  AgreementUnbindResponse,
  disbursement_default as DisbursementAPI,
  DisbursementQueryMerchantBalanceRequest,
  DisbursementQueryMerchantBalanceResponse,
  DisbursementQueryMerchantBalanceResponseData,
  DisbursementQueryOrderRequest,
  DisbursementQueryOrderResponse,
  DisbursementQueryOrderResponseData,
  DisbursementQueryUserRequest,
  DisbursementQueryUserResponse,
  DisbursementQueryUserResponseData,
  DisbursementTopupRequest,
  DisbursementTopupResponse,
  DisbursementTopupResponseData,
  GatewayBankItem,
  GatewayGetListBanksResponse,
  GatewayGetListBanksResponseBanks,
  ObjectSerializer,
  order_default as OrderAPI,
  OrderCreateRequest,
  OrderCreateResponse,
  OrderQueryRequest,
  OrderQueryResponse,
  refund_default as RefundAPI,
  RefundCreateRequest,
  RefundCreateResponse,
  RefundQueryRequest,
  RefundQueryResponse,
  SecurityProvider,
  tokenization_default as TokenizationAPI,
  ZaloPayClient,
  zod_default as ZodAPI,
  ZodCreateInvoiceRequest,
  ZodCreateInvoiceRequestOrderInfoInner,
  ZodCreateInvoiceRequestReceiver,
  ZodCreateInvoiceResponse,
  ZodQueryInvoiceResponse,
  ZodQueryStatusResponse
};
